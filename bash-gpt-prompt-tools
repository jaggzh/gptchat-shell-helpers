#!/bin/bash
# Utils to access gpt prompts and get them into the clipboard
# Set gpt_prompt_dir= prior to sourcing this script
#  (or it'll default to ~/gpt/prompts which is a dumb location)

ourdir="$(dirname "$(realpath "${BASH_SOURCE[0]:-${0}}")")"
ourname="${ourdir##*/}"
# echo "Ourdir: $ourdir"
# echo "Ourname: $ourname"
. "$ourdir/ansi.sh" # Colours!
if [[ -z "$gpt_prompt_dir" ]]; then
	gpt_prompt_dir=~/data/gpt/prompts
fi

gptprompt_fzf_proper=${ourdir}/fzf-proper
gptprompt_fzf_preview_height=5

# Some references from another project:
: '
delete_me_padd () {
	local pdir
	local cmtu=''  # User comment
	local cmt=''
	local ans
	local done=0
	if [[ "$#" -lt 1 ]]; then
		pdirreal=$(readlink -- "$PWD")
		if [[ "$pdirreal" = '' ]]; then pdirreal="$PWD"; fi # dir is same
		pdir=${PWD,,}
		pdirp=${pdir##*/}
		echo
		echo "Adding new project: $yele$pdirp$rste"
		echo "          Dest dir: $yele$pdirreal$rsete"
		local shortcut="$pdirp--"
		while [[ $done = 0 ]]; do
			local prompt='Modify shortcut: \[${bgree}\]'
			read -e -i "$shortcut" -p "${prompt@P}" shortcut
			echo -n "$rste"
			if [[ $shortcut = '' ]]; then
				echo "${brede}Empty string not allowed$rste" >&2
				break
			else
				shortcut=${shortcut//[[:space:]\/\"]/_} # space, slash, "
			fi
			local fin="$shortcut"
			echo
			echo "We're going to add '$yele$fin$rste' as a project."
				cat <<-EOT
					Linking:
						ln -s "$yele$pdirreal$rste" "$bmage$handydir_base/$fin$rste"
				EOT
			read -p "Okay (Y/n)? " ans
			if [[ ! "$ans" =~ ^[Yy]?$ ]]; then
				echo "No?  ${yele}Try again or Ctrl-C to quit$rste"
			else
				ln -s "$pdirreal" "$handydir_base/$fin"
				done=1
			fi
		done
	fi
}
delete_me_prm () {
	cd "$handydir_base" && {
		if [[ "$#" -gt 1 ]]; then 
			echo
			echo "We're in $handydir_base."
			echo "We're going to REMOVE $brede'$1'$rste"
			read -p "Okay (y/N)? " ans
			if [[ "$ans" =~ ^[Yy] ]]; then
				echo "Removing: $1 (dry run still)"
				echo "rm '$1'"
			fi
		fi
	}
}
'

gptprompt () {
	local re
	# echo "CHDIR($gpt_prompt_dir)"
	# echo "Completion arg 1: $1"
	# echo "Completion arg 2: $2"
	local match="$1"
	local items
	(cd "$gpt_prompt_dir" && {
		if [[ "$match" = '' ]]; then re=".*"; else re=".*$match.*"; fi
		# echo "re        : $re"
		# echo "find (vis): find . -type l -regex "$re" -printf '%TY-%Tm-%Td--%TH:%TM %p\n'"
		mapfile -td '' items < <(find . -type f -regex "$re" \
		                               -printf '%TY-%Tm-%Td--%TH:%TM %p\0' |
		                                  sort -rz -k1n,2 | "${gptprompt_fzf_cmd[@]}" -q "$match")
		# echo "FZF replies: ${items[@]}"
		if [[ "${#items}" -gt 0 ]]; then
			local promptfile=${items[0]}
			promptfile=$(printf '%s' "$promptfile" | cut -d' ' -f2-)
			echo "${bcyae}"
			cat -- "$promptfile"
			echo "${rste}"
			cat -- "$promptfile" | xsel -i -b
			echo "${yele}Copied to clipboard$rste"
		fi
	})
}

# --preview-window=
#gptprompt_fzf_cmd=("$gptprompt_fzf_proper" -zz --delimiter=$' ' --preview='cd -P {2..} && { pwd; ls -lGg | tail -n +2 | sed -e "s/^/ /"; }'
gptprompt_fzf_cmd=("$gptprompt_fzf_proper" -zz --delimiter=$' ' --preview='cat -- {2}'
         --preview-window=top:$gptprompt_fzf_preview_height)

# Bash completion reference, from another project
: '
_pcdt_complete() {
	local re
	# echo "CHDIR($handydir_base)"
	# echo "Completion arg 2: $2"
	local match="$2"
	cd "$handydir_base" && {
		if [[ "$match" = '' ]]; then re=".*"; else re=".*$match.*"; fi
		# echo "re        : $re"
		# echo "find (vis): find . -type l -regex "$re" -printf '%TY-%Tm-%Td--%TH:%TM %p\n'"
		# mapfile -td '' COMPREPLY < <(find . -type l -regex "$re" \
		#                                -printf '%TY-%Tm-%Td--%TH:%TM %p\0' |
		#                                   sort -rnz | "${gptprompt_fzf_cmd[@]}" -q "$match")
		# find . -type l -regex "$re" \
		#                                -printf '%TY-%Tm-%Td--%TH:%TM %p\0' |
		#                                   sort -rnz | sed -ze 's#^[^ ]* \./##; s/$/\n/;'
		# echo
		# \/ printf stuff for sorting output from find
		mapfile -td '' COMPREPLY < <(find . -type l -regex "$re" \
		                               -printf '%TY-%Tm-%Td--%TH:%TM %p\0' |
										  sort -rnz | sed -ze 's#^[^ ]* \./##;')
	}
}
complete -F _pcdt_complete pcdt
alias project_dir_pcd_padd='echo "Use pcd, padd, prm'
'
